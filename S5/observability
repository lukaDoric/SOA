Observability podrazuvema uvođenja metrika, logova i trace-ova (još se nazivaju **The three pillars of observability**) u sistem koji se želi nadgledati. Ova tri koncepta pomažu da se pruži sveobuhvatno razumevanje kako sistem funkcioniše i mogu se koristiti za identifikaciju i rešavanje problema.

- **Logovi** su zapisi događaja koji se dešavaju unutar sistema, kao što su greške ili radnje korisnika. Oni pružaju detaljan prikaz onoga što se dešava u datom trenutku i mogu se koristiti za otklanjanje grešaka ili revizije.
- **Metrike** su numerička merenja koja prate performanse sistema tokom vremena. Mogu se koristiti za postavljanje upozorenja i identifikovanje trendova ili anomalija. 
- **Tracing** podrazumeva praćenje zahteva kroz sistem da bi se pratio njegov put i identifikovala sva uska grla ili greške. Pruža detaljan pregled toka podataka i može se koristiti za optimizaciju performansi sistema.

Timovi mogu da steknu potpuniju sliku o svojim sistemima i bolje razumeju kako oni rade. Ovo može dovesti do brže dijagnoze i rešavanja problema, kao i do poboljšanja ukupne pouzdanosti i performansi sistema.Uočljivost je posebno važna u složenim distribuiranim sistemima, gde tradicionalni alati za praćenje možda ne pružaju dovoljnu vidljivost. Sa vidljivošću, timovi mogu lakše razumeti interakcije između različitih komponenti i usluga i brzo identifikovati probleme koji mogu da utiču na ukupne performanse sistema. 

Ekosistem je  poprilično veliki kada su pitanju alati koji pružaju prikupljnje logova, metrika i trace-ova. Među najpopularnijima su:

- Monitoring: Prometheus, Datadog, Zabbix.
- Logging: Loki, ElasticSearch.
- Log aggregator: Fluent-bit, Promtail. 
- Tracing: Jaeger, Tempo, Zipkin.
-  Visualisation: Grafana, Kibana. 

Svaki od prethodno navedenih alata ima svoj SDK koji omogućava integraciju između samog alata i aplikacija. Programeri su primorani da koriste SDK i pomoću njega da rade instrumentaciju metrika, logova ili trace-ova (zavisi od konkretnog alata). Ukoliko je neophodno promeniti neki alat iz observability stack-a, neophodno je koristi SDK od tog alata i izmeniti u svim aplikacijama kod koji se odnosio na instrumentaciju. U velikim sistemima ovo predstavlja ozbiljan problem jer je migracija na novi alat jako bolna. Ovaj problem pokušava da reši [OpenTelemetry](https://opentelemetry.io/) koji uvodi standard za metrike, logove i trace-ove. Sve više observability  alata se prilagođava ovom standardu kako bi se omogućilo da se jednom napisan kod za instrumentaciju ne menja ukoliko se promeniti alat iz observability stack-a. OpenTelemetry je još uvek pod razvojom i razvojni status se razlikuje od jezika do jezika. Status razvoja svih jezika je dostupan [ovde](https://opentelemetry.io/status/). 

**Napomena**: Pitanje je vremena kada će indrustrija da usvoji OpenTelemetry  kao standard tako je topla preporuka krenuti što pre sa upoznavanjem sa OpenTelemetry ekosistemom.

U primeru observability stack čine:

- Prometheus
- Loki
- Fluent-bit
- Jaeger
- Grafana 

Primeri koda koji se koriste u nastavnku lekcije su dostupni na:

- Go sa gin-gonic framework-om: https://github.com/DanijelRadakovic/dojo
- Java sa SpringBoot framework-om: https://github.com/DanijelRadakovic/server

Kompletan observability stack se pokreće pomoću docker-a, tako da je taj deo identičan u oba primera.  
